// Code generated by mockery v2.46.3. DO NOT EDIT.

package asset_simulation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAssetSimulator is an autogenerated mock type for the AssetSimulator type
type MockAssetSimulator struct {
	mock.Mock
}

type MockAssetSimulator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssetSimulator) EXPECT() *MockAssetSimulator_Expecter {
	return &MockAssetSimulator_Expecter{mock: &_m.Mock}
}

// GetId provides a mock function with given fields:
func (_m *MockAssetSimulator) GetId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAssetSimulator_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type MockAssetSimulator_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *MockAssetSimulator_Expecter) GetId() *MockAssetSimulator_GetId_Call {
	return &MockAssetSimulator_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *MockAssetSimulator_GetId_Call) Run(run func()) *MockAssetSimulator_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssetSimulator_GetId_Call) Return(_a0 string) *MockAssetSimulator_GetId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetSimulator_GetId_Call) RunAndReturn(run func() string) *MockAssetSimulator_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function with given fields:
func (_m *MockAssetSimulator) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAssetSimulator_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockAssetSimulator_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockAssetSimulator_Expecter) IsRunning() *MockAssetSimulator_IsRunning_Call {
	return &MockAssetSimulator_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockAssetSimulator_IsRunning_Call) Run(run func()) *MockAssetSimulator_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssetSimulator_IsRunning_Call) Return(_a0 bool) *MockAssetSimulator_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetSimulator_IsRunning_Call) RunAndReturn(run func() bool) *MockAssetSimulator_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockAssetSimulator) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssetSimulator_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockAssetSimulator_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAssetSimulator_Expecter) Start(ctx interface{}) *MockAssetSimulator_Start_Call {
	return &MockAssetSimulator_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockAssetSimulator_Start_Call) Run(run func(ctx context.Context)) *MockAssetSimulator_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAssetSimulator_Start_Call) Return(_a0 error) *MockAssetSimulator_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetSimulator_Start_Call) RunAndReturn(run func(context.Context) error) *MockAssetSimulator_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *MockAssetSimulator) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssetSimulator_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockAssetSimulator_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockAssetSimulator_Expecter) Stop() *MockAssetSimulator_Stop_Call {
	return &MockAssetSimulator_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockAssetSimulator_Stop_Call) Run(run func()) *MockAssetSimulator_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssetSimulator_Stop_Call) Return(_a0 error) *MockAssetSimulator_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetSimulator_Stop_Call) RunAndReturn(run func() error) *MockAssetSimulator_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAssetSimulator creates a new instance of MockAssetSimulator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssetSimulator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssetSimulator {
	mock := &MockAssetSimulator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

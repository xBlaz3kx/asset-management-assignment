// Code generated by mockery v2.46.3. DO NOT EDIT.

package asset_simulation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRunner is an autogenerated mock type for the Runner type
type MockRunner struct {
	mock.Mock
}

type MockRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRunner) EXPECT() *MockRunner_Expecter {
	return &MockRunner_Expecter{mock: &_m.Mock}
}

// GetId provides a mock function with given fields:
func (_m *MockRunner) GetId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRunner_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type MockRunner_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *MockRunner_Expecter) GetId() *MockRunner_GetId_Call {
	return &MockRunner_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *MockRunner_GetId_Call) Run(run func()) *MockRunner_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRunner_GetId_Call) Return(_a0 string) *MockRunner_GetId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRunner_GetId_Call) RunAndReturn(run func() string) *MockRunner_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function with given fields:
func (_m *MockRunner) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRunner_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockRunner_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockRunner_Expecter) IsRunning() *MockRunner_IsRunning_Call {
	return &MockRunner_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockRunner_IsRunning_Call) Run(run func()) *MockRunner_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRunner_IsRunning_Call) Return(_a0 bool) *MockRunner_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRunner_IsRunning_Call) RunAndReturn(run func() bool) *MockRunner_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockRunner) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRunner_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockRunner_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRunner_Expecter) Start(ctx interface{}) *MockRunner_Start_Call {
	return &MockRunner_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockRunner_Start_Call) Run(run func(ctx context.Context)) *MockRunner_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRunner_Start_Call) Return(_a0 error) *MockRunner_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRunner_Start_Call) RunAndReturn(run func(context.Context) error) *MockRunner_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *MockRunner) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRunner_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockRunner_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockRunner_Expecter) Stop() *MockRunner_Stop_Call {
	return &MockRunner_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockRunner_Stop_Call) Run(run func()) *MockRunner_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRunner_Stop_Call) Return(_a0 error) *MockRunner_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRunner_Stop_Call) RunAndReturn(run func() error) *MockRunner_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRunner creates a new instance of MockRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRunner {
	mock := &MockRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

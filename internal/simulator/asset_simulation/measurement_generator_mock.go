// Code generated by mockery v2.46.3. DO NOT EDIT.

package asset_simulation

import (
	domain "asset-measurements-assignment/internal/domain"
	measurements "asset-measurements-assignment/internal/domain/measurements"

	mock "github.com/stretchr/testify/mock"
)

// MockMeasurementGenerator is an autogenerated mock type for the MeasurementGenerator type
type MockMeasurementGenerator struct {
	mock.Mock
}

type MockMeasurementGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMeasurementGenerator) EXPECT() *MockMeasurementGenerator_Expecter {
	return &MockMeasurementGenerator_Expecter{mock: &_m.Mock}
}

// GenerateMeasurement provides a mock function with given fields:
func (_m *MockMeasurementGenerator) GenerateMeasurement() (*measurements.Measurement, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateMeasurement")
	}

	var r0 *measurements.Measurement
	var r1 error
	if rf, ok := ret.Get(0).(func() (*measurements.Measurement, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *measurements.Measurement); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*measurements.Measurement)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMeasurementGenerator_GenerateMeasurement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateMeasurement'
type MockMeasurementGenerator_GenerateMeasurement_Call struct {
	*mock.Call
}

// GenerateMeasurement is a helper method to define mock.On call
func (_e *MockMeasurementGenerator_Expecter) GenerateMeasurement() *MockMeasurementGenerator_GenerateMeasurement_Call {
	return &MockMeasurementGenerator_GenerateMeasurement_Call{Call: _e.mock.On("GenerateMeasurement")}
}

func (_c *MockMeasurementGenerator_GenerateMeasurement_Call) Run(run func()) *MockMeasurementGenerator_GenerateMeasurement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMeasurementGenerator_GenerateMeasurement_Call) Return(_a0 *measurements.Measurement, _a1 error) *MockMeasurementGenerator_GenerateMeasurement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMeasurementGenerator_GenerateMeasurement_Call) RunAndReturn(run func() (*measurements.Measurement, error)) *MockMeasurementGenerator_GenerateMeasurement_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnergyType provides a mock function with given fields:
func (_m *MockMeasurementGenerator) GetEnergyType() domain.EnergyType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEnergyType")
	}

	var r0 domain.EnergyType
	if rf, ok := ret.Get(0).(func() domain.EnergyType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.EnergyType)
	}

	return r0
}

// MockMeasurementGenerator_GetEnergyType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnergyType'
type MockMeasurementGenerator_GetEnergyType_Call struct {
	*mock.Call
}

// GetEnergyType is a helper method to define mock.On call
func (_e *MockMeasurementGenerator_Expecter) GetEnergyType() *MockMeasurementGenerator_GetEnergyType_Call {
	return &MockMeasurementGenerator_GetEnergyType_Call{Call: _e.mock.On("GetEnergyType")}
}

func (_c *MockMeasurementGenerator_GetEnergyType_Call) Run(run func()) *MockMeasurementGenerator_GetEnergyType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMeasurementGenerator_GetEnergyType_Call) Return(_a0 domain.EnergyType) *MockMeasurementGenerator_GetEnergyType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMeasurementGenerator_GetEnergyType_Call) RunAndReturn(run func() domain.EnergyType) *MockMeasurementGenerator_GetEnergyType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMeasurementGenerator creates a new instance of MockMeasurementGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMeasurementGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMeasurementGenerator {
	mock := &MockMeasurementGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

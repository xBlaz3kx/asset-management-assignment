// Code generated by mockery v2.46.3. DO NOT EDIT.

package assets

import (
	assets "asset-measurements-assignment/internal/domain/assets"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// CreateAsset provides a mock function with given fields: ctx, asset
func (_m *MockService) CreateAsset(ctx context.Context, asset assets.Asset) error {
	ret := _m.Called(ctx, asset)

	if len(ret) == 0 {
		panic("no return value specified for CreateAsset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, assets.Asset) error); ok {
		r0 = rf(ctx, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_CreateAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAsset'
type MockService_CreateAsset_Call struct {
	*mock.Call
}

// CreateAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - asset assets.Asset
func (_e *MockService_Expecter) CreateAsset(ctx interface{}, asset interface{}) *MockService_CreateAsset_Call {
	return &MockService_CreateAsset_Call{Call: _e.mock.On("CreateAsset", ctx, asset)}
}

func (_c *MockService_CreateAsset_Call) Run(run func(ctx context.Context, asset assets.Asset)) *MockService_CreateAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(assets.Asset))
	})
	return _c
}

func (_c *MockService_CreateAsset_Call) Return(_a0 error) *MockService_CreateAsset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_CreateAsset_Call) RunAndReturn(run func(context.Context, assets.Asset) error) *MockService_CreateAsset_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAsset provides a mock function with given fields: ctx, assetId
func (_m *MockService) DeleteAsset(ctx context.Context, assetId string) error {
	ret := _m.Called(ctx, assetId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAsset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, assetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_DeleteAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAsset'
type MockService_DeleteAsset_Call struct {
	*mock.Call
}

// DeleteAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - assetId string
func (_e *MockService_Expecter) DeleteAsset(ctx interface{}, assetId interface{}) *MockService_DeleteAsset_Call {
	return &MockService_DeleteAsset_Call{Call: _e.mock.On("DeleteAsset", ctx, assetId)}
}

func (_c *MockService_DeleteAsset_Call) Run(run func(ctx context.Context, assetId string)) *MockService_DeleteAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_DeleteAsset_Call) Return(_a0 error) *MockService_DeleteAsset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_DeleteAsset_Call) RunAndReturn(run func(context.Context, string) error) *MockService_DeleteAsset_Call {
	_c.Call.Return(run)
	return _c
}

// GetAsset provides a mock function with given fields: ctx, assetId
func (_m *MockService) GetAsset(ctx context.Context, assetId string) (*assets.Asset, error) {
	ret := _m.Called(ctx, assetId)

	if len(ret) == 0 {
		panic("no return value specified for GetAsset")
	}

	var r0 *assets.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*assets.Asset, error)); ok {
		return rf(ctx, assetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *assets.Asset); ok {
		r0 = rf(ctx, assetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, assetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAsset'
type MockService_GetAsset_Call struct {
	*mock.Call
}

// GetAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - assetId string
func (_e *MockService_Expecter) GetAsset(ctx interface{}, assetId interface{}) *MockService_GetAsset_Call {
	return &MockService_GetAsset_Call{Call: _e.mock.On("GetAsset", ctx, assetId)}
}

func (_c *MockService_GetAsset_Call) Run(run func(ctx context.Context, assetId string)) *MockService_GetAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetAsset_Call) Return(_a0 *assets.Asset, _a1 error) *MockService_GetAsset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetAsset_Call) RunAndReturn(run func(context.Context, string) (*assets.Asset, error)) *MockService_GetAsset_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssets provides a mock function with given fields: ctx, query
func (_m *MockService) GetAssets(ctx context.Context, query assets.AssetQuery) ([]assets.Asset, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetAssets")
	}

	var r0 []assets.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, assets.AssetQuery) ([]assets.Asset, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, assets.AssetQuery) []assets.Asset); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]assets.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, assets.AssetQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssets'
type MockService_GetAssets_Call struct {
	*mock.Call
}

// GetAssets is a helper method to define mock.On call
//   - ctx context.Context
//   - query assets.AssetQuery
func (_e *MockService_Expecter) GetAssets(ctx interface{}, query interface{}) *MockService_GetAssets_Call {
	return &MockService_GetAssets_Call{Call: _e.mock.On("GetAssets", ctx, query)}
}

func (_c *MockService_GetAssets_Call) Run(run func(ctx context.Context, query assets.AssetQuery)) *MockService_GetAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(assets.AssetQuery))
	})
	return _c
}

func (_c *MockService_GetAssets_Call) Return(_a0 []assets.Asset, _a1 error) *MockService_GetAssets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetAssets_Call) RunAndReturn(run func(context.Context, assets.AssetQuery) ([]assets.Asset, error)) *MockService_GetAssets_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAsset provides a mock function with given fields: ctx, assetId, asset
func (_m *MockService) UpdateAsset(ctx context.Context, assetId string, asset assets.Asset) error {
	ret := _m.Called(ctx, assetId, asset)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAsset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, assets.Asset) error); ok {
		r0 = rf(ctx, assetId, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_UpdateAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAsset'
type MockService_UpdateAsset_Call struct {
	*mock.Call
}

// UpdateAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - assetId string
//   - asset assets.Asset
func (_e *MockService_Expecter) UpdateAsset(ctx interface{}, assetId interface{}, asset interface{}) *MockService_UpdateAsset_Call {
	return &MockService_UpdateAsset_Call{Call: _e.mock.On("UpdateAsset", ctx, assetId, asset)}
}

func (_c *MockService_UpdateAsset_Call) Run(run func(ctx context.Context, assetId string, asset assets.Asset)) *MockService_UpdateAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(assets.Asset))
	})
	return _c
}

func (_c *MockService_UpdateAsset_Call) Return(_a0 error) *MockService_UpdateAsset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_UpdateAsset_Call) RunAndReturn(run func(context.Context, string, assets.Asset) error) *MockService_UpdateAsset_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

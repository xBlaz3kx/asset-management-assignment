// Code generated by mockery v2.46.3. DO NOT EDIT.

package simulator

import (
	simulator "asset-measurements-assignment/internal/domain/simulator"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockConfigService is an autogenerated mock type for the ConfigService type
type MockConfigService struct {
	mock.Mock
}

type MockConfigService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigService) EXPECT() *MockConfigService_Expecter {
	return &MockConfigService_Expecter{mock: &_m.Mock}
}

// CreateConfiguration provides a mock function with given fields: ctx, configuration
func (_m *MockConfigService) CreateConfiguration(ctx context.Context, configuration simulator.Configuration) (*simulator.Configuration, error) {
	ret := _m.Called(ctx, configuration)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfiguration")
	}

	var r0 *simulator.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, simulator.Configuration) (*simulator.Configuration, error)); ok {
		return rf(ctx, configuration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, simulator.Configuration) *simulator.Configuration); ok {
		r0 = rf(ctx, configuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simulator.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, simulator.Configuration) error); ok {
		r1 = rf(ctx, configuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigService_CreateConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConfiguration'
type MockConfigService_CreateConfiguration_Call struct {
	*mock.Call
}

// CreateConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - configuration simulator.Configuration
func (_e *MockConfigService_Expecter) CreateConfiguration(ctx interface{}, configuration interface{}) *MockConfigService_CreateConfiguration_Call {
	return &MockConfigService_CreateConfiguration_Call{Call: _e.mock.On("CreateConfiguration", ctx, configuration)}
}

func (_c *MockConfigService_CreateConfiguration_Call) Run(run func(ctx context.Context, configuration simulator.Configuration)) *MockConfigService_CreateConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(simulator.Configuration))
	})
	return _c
}

func (_c *MockConfigService_CreateConfiguration_Call) Return(_a0 *simulator.Configuration, _a1 error) *MockConfigService_CreateConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigService_CreateConfiguration_Call) RunAndReturn(run func(context.Context, simulator.Configuration) (*simulator.Configuration, error)) *MockConfigService_CreateConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConfiguration provides a mock function with given fields: ctx, assetId, configurationId
func (_m *MockConfigService) DeleteConfiguration(ctx context.Context, assetId string, configurationId string) error {
	ret := _m.Called(ctx, assetId, configurationId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfiguration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, assetId, configurationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigService_DeleteConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConfiguration'
type MockConfigService_DeleteConfiguration_Call struct {
	*mock.Call
}

// DeleteConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - assetId string
//   - configurationId string
func (_e *MockConfigService_Expecter) DeleteConfiguration(ctx interface{}, assetId interface{}, configurationId interface{}) *MockConfigService_DeleteConfiguration_Call {
	return &MockConfigService_DeleteConfiguration_Call{Call: _e.mock.On("DeleteConfiguration", ctx, assetId, configurationId)}
}

func (_c *MockConfigService_DeleteConfiguration_Call) Run(run func(ctx context.Context, assetId string, configurationId string)) *MockConfigService_DeleteConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockConfigService_DeleteConfiguration_Call) Return(_a0 error) *MockConfigService_DeleteConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigService_DeleteConfiguration_Call) RunAndReturn(run func(context.Context, string, string) error) *MockConfigService_DeleteConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetConfiguration provides a mock function with given fields: ctx, assetId
func (_m *MockConfigService) GetAssetConfiguration(ctx context.Context, assetId string) (*simulator.Configuration, error) {
	ret := _m.Called(ctx, assetId)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetConfiguration")
	}

	var r0 *simulator.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*simulator.Configuration, error)); ok {
		return rf(ctx, assetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *simulator.Configuration); ok {
		r0 = rf(ctx, assetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simulator.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, assetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigService_GetAssetConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetConfiguration'
type MockConfigService_GetAssetConfiguration_Call struct {
	*mock.Call
}

// GetAssetConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - assetId string
func (_e *MockConfigService_Expecter) GetAssetConfiguration(ctx interface{}, assetId interface{}) *MockConfigService_GetAssetConfiguration_Call {
	return &MockConfigService_GetAssetConfiguration_Call{Call: _e.mock.On("GetAssetConfiguration", ctx, assetId)}
}

func (_c *MockConfigService_GetAssetConfiguration_Call) Run(run func(ctx context.Context, assetId string)) *MockConfigService_GetAssetConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConfigService_GetAssetConfiguration_Call) Return(_a0 *simulator.Configuration, _a1 error) *MockConfigService_GetAssetConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigService_GetAssetConfiguration_Call) RunAndReturn(run func(context.Context, string) (*simulator.Configuration, error)) *MockConfigService_GetAssetConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigurations provides a mock function with given fields: ctx
func (_m *MockConfigService) GetConfigurations(ctx context.Context) ([]simulator.Configuration, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurations")
	}

	var r0 []simulator.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]simulator.Configuration, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []simulator.Configuration); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]simulator.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigService_GetConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigurations'
type MockConfigService_GetConfigurations_Call struct {
	*mock.Call
}

// GetConfigurations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigService_Expecter) GetConfigurations(ctx interface{}) *MockConfigService_GetConfigurations_Call {
	return &MockConfigService_GetConfigurations_Call{Call: _e.mock.On("GetConfigurations", ctx)}
}

func (_c *MockConfigService_GetConfigurations_Call) Run(run func(ctx context.Context)) *MockConfigService_GetConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigService_GetConfigurations_Call) Return(_a0 []simulator.Configuration, _a1 error) *MockConfigService_GetConfigurations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigService_GetConfigurations_Call) RunAndReturn(run func(context.Context) ([]simulator.Configuration, error)) *MockConfigService_GetConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// StartWorkersFromDatabaseConfigurations provides a mock function with given fields: ctx
func (_m *MockConfigService) StartWorkersFromDatabaseConfigurations(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartWorkersFromDatabaseConfigurations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigService_StartWorkersFromDatabaseConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartWorkersFromDatabaseConfigurations'
type MockConfigService_StartWorkersFromDatabaseConfigurations_Call struct {
	*mock.Call
}

// StartWorkersFromDatabaseConfigurations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigService_Expecter) StartWorkersFromDatabaseConfigurations(ctx interface{}) *MockConfigService_StartWorkersFromDatabaseConfigurations_Call {
	return &MockConfigService_StartWorkersFromDatabaseConfigurations_Call{Call: _e.mock.On("StartWorkersFromDatabaseConfigurations", ctx)}
}

func (_c *MockConfigService_StartWorkersFromDatabaseConfigurations_Call) Run(run func(ctx context.Context)) *MockConfigService_StartWorkersFromDatabaseConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigService_StartWorkersFromDatabaseConfigurations_Call) Return(_a0 error) *MockConfigService_StartWorkersFromDatabaseConfigurations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigService_StartWorkersFromDatabaseConfigurations_Call) RunAndReturn(run func(context.Context) error) *MockConfigService_StartWorkersFromDatabaseConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigService creates a new instance of MockConfigService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigService {
	mock := &MockConfigService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

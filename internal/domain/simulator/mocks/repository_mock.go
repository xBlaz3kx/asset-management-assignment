// Code generated by mockery v2.46.3. DO NOT EDIT.

package simulator

import (
	simulator "asset-measurements-assignment/internal/domain/simulator"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CreateConfiguration provides a mock function with given fields: ctx, configuration
func (_m *MockRepository) CreateConfiguration(ctx context.Context, configuration simulator.Configuration) (*simulator.Configuration, error) {
	ret := _m.Called(ctx, configuration)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfiguration")
	}

	var r0 *simulator.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, simulator.Configuration) (*simulator.Configuration, error)); ok {
		return rf(ctx, configuration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, simulator.Configuration) *simulator.Configuration); ok {
		r0 = rf(ctx, configuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simulator.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, simulator.Configuration) error); ok {
		r1 = rf(ctx, configuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConfiguration'
type MockRepository_CreateConfiguration_Call struct {
	*mock.Call
}

// CreateConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - configuration simulator.Configuration
func (_e *MockRepository_Expecter) CreateConfiguration(ctx interface{}, configuration interface{}) *MockRepository_CreateConfiguration_Call {
	return &MockRepository_CreateConfiguration_Call{Call: _e.mock.On("CreateConfiguration", ctx, configuration)}
}

func (_c *MockRepository_CreateConfiguration_Call) Run(run func(ctx context.Context, configuration simulator.Configuration)) *MockRepository_CreateConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(simulator.Configuration))
	})
	return _c
}

func (_c *MockRepository_CreateConfiguration_Call) Return(_a0 *simulator.Configuration, _a1 error) *MockRepository_CreateConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateConfiguration_Call) RunAndReturn(run func(context.Context, simulator.Configuration) (*simulator.Configuration, error)) *MockRepository_CreateConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConfiguration provides a mock function with given fields: ctx, configurationId
func (_m *MockRepository) DeleteConfiguration(ctx context.Context, configurationId string) error {
	ret := _m.Called(ctx, configurationId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfiguration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, configurationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConfiguration'
type MockRepository_DeleteConfiguration_Call struct {
	*mock.Call
}

// DeleteConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - configurationId string
func (_e *MockRepository_Expecter) DeleteConfiguration(ctx interface{}, configurationId interface{}) *MockRepository_DeleteConfiguration_Call {
	return &MockRepository_DeleteConfiguration_Call{Call: _e.mock.On("DeleteConfiguration", ctx, configurationId)}
}

func (_c *MockRepository_DeleteConfiguration_Call) Run(run func(ctx context.Context, configurationId string)) *MockRepository_DeleteConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_DeleteConfiguration_Call) Return(_a0 error) *MockRepository_DeleteConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteConfiguration_Call) RunAndReturn(run func(context.Context, string) error) *MockRepository_DeleteConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetConfiguration provides a mock function with given fields: ctx, assetId
func (_m *MockRepository) GetAssetConfiguration(ctx context.Context, assetId string) (*simulator.Configuration, error) {
	ret := _m.Called(ctx, assetId)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetConfiguration")
	}

	var r0 *simulator.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*simulator.Configuration, error)); ok {
		return rf(ctx, assetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *simulator.Configuration); ok {
		r0 = rf(ctx, assetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*simulator.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, assetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetAssetConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetConfiguration'
type MockRepository_GetAssetConfiguration_Call struct {
	*mock.Call
}

// GetAssetConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - assetId string
func (_e *MockRepository_Expecter) GetAssetConfiguration(ctx interface{}, assetId interface{}) *MockRepository_GetAssetConfiguration_Call {
	return &MockRepository_GetAssetConfiguration_Call{Call: _e.mock.On("GetAssetConfiguration", ctx, assetId)}
}

func (_c *MockRepository_GetAssetConfiguration_Call) Run(run func(ctx context.Context, assetId string)) *MockRepository_GetAssetConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetAssetConfiguration_Call) Return(_a0 *simulator.Configuration, _a1 error) *MockRepository_GetAssetConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAssetConfiguration_Call) RunAndReturn(run func(context.Context, string) (*simulator.Configuration, error)) *MockRepository_GetAssetConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigurations provides a mock function with given fields: ctx
func (_m *MockRepository) GetConfigurations(ctx context.Context) ([]simulator.Configuration, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurations")
	}

	var r0 []simulator.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]simulator.Configuration, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []simulator.Configuration); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]simulator.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigurations'
type MockRepository_GetConfigurations_Call struct {
	*mock.Call
}

// GetConfigurations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) GetConfigurations(ctx interface{}) *MockRepository_GetConfigurations_Call {
	return &MockRepository_GetConfigurations_Call{Call: _e.mock.On("GetConfigurations", ctx)}
}

func (_c *MockRepository_GetConfigurations_Call) Run(run func(ctx context.Context)) *MockRepository_GetConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_GetConfigurations_Call) Return(_a0 []simulator.Configuration, _a1 error) *MockRepository_GetConfigurations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetConfigurations_Call) RunAndReturn(run func(context.Context) ([]simulator.Configuration, error)) *MockRepository_GetConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

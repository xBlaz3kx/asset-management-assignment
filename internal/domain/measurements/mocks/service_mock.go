// Code generated by mockery v2.46.3. DO NOT EDIT.

package measurements

import (
	measurements "asset-measurements-assignment/internal/domain/measurements"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetAssetMeasurements provides a mock function with given fields: ctx, assetID, timeRange
func (_m *MockService) GetAssetMeasurements(ctx context.Context, assetID string, timeRange measurements.TimeRange) ([]measurements.Measurement, error) {
	ret := _m.Called(ctx, assetID, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetMeasurements")
	}

	var r0 []measurements.Measurement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, measurements.TimeRange) ([]measurements.Measurement, error)); ok {
		return rf(ctx, assetID, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, measurements.TimeRange) []measurements.Measurement); ok {
		r0 = rf(ctx, assetID, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]measurements.Measurement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, measurements.TimeRange) error); ok {
		r1 = rf(ctx, assetID, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetAssetMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetMeasurements'
type MockService_GetAssetMeasurements_Call struct {
	*mock.Call
}

// GetAssetMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - assetID string
//   - timeRange measurements.TimeRange
func (_e *MockService_Expecter) GetAssetMeasurements(ctx interface{}, assetID interface{}, timeRange interface{}) *MockService_GetAssetMeasurements_Call {
	return &MockService_GetAssetMeasurements_Call{Call: _e.mock.On("GetAssetMeasurements", ctx, assetID, timeRange)}
}

func (_c *MockService_GetAssetMeasurements_Call) Run(run func(ctx context.Context, assetID string, timeRange measurements.TimeRange)) *MockService_GetAssetMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(measurements.TimeRange))
	})
	return _c
}

func (_c *MockService_GetAssetMeasurements_Call) Return(_a0 []measurements.Measurement, _a1 error) *MockService_GetAssetMeasurements_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetAssetMeasurements_Call) RunAndReturn(run func(context.Context, string, measurements.TimeRange) ([]measurements.Measurement, error)) *MockService_GetAssetMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetMeasurementsAveraged provides a mock function with given fields: ctx, assetID, params
func (_m *MockService) GetAssetMeasurementsAveraged(ctx context.Context, assetID string, params measurements.AssetMeasurementAveragedParams) ([]measurements.Measurement, error) {
	ret := _m.Called(ctx, assetID, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetMeasurementsAveraged")
	}

	var r0 []measurements.Measurement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, measurements.AssetMeasurementAveragedParams) ([]measurements.Measurement, error)); ok {
		return rf(ctx, assetID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, measurements.AssetMeasurementAveragedParams) []measurements.Measurement); ok {
		r0 = rf(ctx, assetID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]measurements.Measurement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, measurements.AssetMeasurementAveragedParams) error); ok {
		r1 = rf(ctx, assetID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetAssetMeasurementsAveraged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetMeasurementsAveraged'
type MockService_GetAssetMeasurementsAveraged_Call struct {
	*mock.Call
}

// GetAssetMeasurementsAveraged is a helper method to define mock.On call
//   - ctx context.Context
//   - assetID string
//   - params measurements.AssetMeasurementAveragedParams
func (_e *MockService_Expecter) GetAssetMeasurementsAveraged(ctx interface{}, assetID interface{}, params interface{}) *MockService_GetAssetMeasurementsAveraged_Call {
	return &MockService_GetAssetMeasurementsAveraged_Call{Call: _e.mock.On("GetAssetMeasurementsAveraged", ctx, assetID, params)}
}

func (_c *MockService_GetAssetMeasurementsAveraged_Call) Run(run func(ctx context.Context, assetID string, params measurements.AssetMeasurementAveragedParams)) *MockService_GetAssetMeasurementsAveraged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(measurements.AssetMeasurementAveragedParams))
	})
	return _c
}

func (_c *MockService_GetAssetMeasurementsAveraged_Call) Return(_a0 []measurements.Measurement, _a1 error) *MockService_GetAssetMeasurementsAveraged_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetAssetMeasurementsAveraged_Call) RunAndReturn(run func(context.Context, string, measurements.AssetMeasurementAveragedParams) ([]measurements.Measurement, error)) *MockService_GetAssetMeasurementsAveraged_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestAssetMeasurement provides a mock function with given fields: ctx, assetID
func (_m *MockService) GetLatestAssetMeasurement(ctx context.Context, assetID string) (*measurements.Measurement, error) {
	ret := _m.Called(ctx, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestAssetMeasurement")
	}

	var r0 *measurements.Measurement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*measurements.Measurement, error)); ok {
		return rf(ctx, assetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *measurements.Measurement); ok {
		r0 = rf(ctx, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*measurements.Measurement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetLatestAssetMeasurement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestAssetMeasurement'
type MockService_GetLatestAssetMeasurement_Call struct {
	*mock.Call
}

// GetLatestAssetMeasurement is a helper method to define mock.On call
//   - ctx context.Context
//   - assetID string
func (_e *MockService_Expecter) GetLatestAssetMeasurement(ctx interface{}, assetID interface{}) *MockService_GetLatestAssetMeasurement_Call {
	return &MockService_GetLatestAssetMeasurement_Call{Call: _e.mock.On("GetLatestAssetMeasurement", ctx, assetID)}
}

func (_c *MockService_GetLatestAssetMeasurement_Call) Run(run func(ctx context.Context, assetID string)) *MockService_GetLatestAssetMeasurement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetLatestAssetMeasurement_Call) Return(_a0 *measurements.Measurement, _a1 error) *MockService_GetLatestAssetMeasurement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetLatestAssetMeasurement_Call) RunAndReturn(run func(context.Context, string) (*measurements.Measurement, error)) *MockService_GetLatestAssetMeasurement_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
